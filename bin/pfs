#! /usr/bin/env python3

import yaml
import os
import argparse
import fnmatch


def get_db():
    main = os.path.expanduser("~/my/pfs/main.yml")
    with open(main) as file:
        return yaml.load(file, Loader=yaml.FullLoader)


def do_get(args):
    db = get_db()
    try:
        entry = db[args.id]
        if args.field:
            try:
                print(entry[args.field])
            except KeyError:
                print("field not found")
                exit(2)
        else:
            for key, value in entry.items():
                print(key)
                # print(yaml.dump(entry), end="")
    except KeyError:
        print("id not found")
        exit(2)


def do_find(args):
    db = get_db()
    for key, value in db.items():
        if not args.pattern:
            print(key)
        else:
            if args.mode == "exact":
                if key == args.pattern:
                    print(key)
            elif args.mode == "fnmatch":
                if fnmatch.fnmatch(key, args.pattern):
                    print(key)
            elif args.mode == "prefix":
                if fnmatch.fnmatch(args.pattern, f"*{key}"):
                    print(key)


def do_select(args):
    db = get_db()
    for id in args.ids:
        entry = db.get(id, {})
        for k, v in entry.items():
            print(f"{id} {k} {v}")


parser = argparse.ArgumentParser(prog="pfs")
subparsers = parser.add_subparsers(dest="subcommand", required=True)
parser_get = subparsers.add_parser("get", help="gets a single id")
parser_get.add_argument("id")
parser_get.add_argument("field", metavar="field", nargs="?", help="default: list fields")
parser_get.set_defaults(func=do_get)
parser_find = subparsers.add_parser("find", help="finds ids")
parser_find.add_argument("-m", "--mode", default="exact", choices=["exact", "fnmatch", "prefix"])
parser_find.add_argument("pattern", metavar="pattern", nargs="?", help="find pattern, default: list all")
parser_find.set_defaults(func=do_find)
parser_select = subparsers.add_parser("select", help="selects the given ids")
parser_select.add_argument("ids", metavar="id", nargs="+")
parser_select.set_defaults(func=do_select)

args = parser.parse_args()
args.func(args)
