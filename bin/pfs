#! /usr/bin/env python3

import yaml
import os
import argparse
import fnmatch
import re

DB_PATH = "~/my/pfs/main.yml"
ENTRY_MATCH_REGEX = r"([^@:]*)@?([^:]*):?(.*)"

class Entry:
    def __init__(self, id, label, alias, field, value):
        self.id = id
        self.label = label
        self.alias = alias
        self.field = field
        self.value = value

    def match_field(self, m):
        return fnmatch.fnmatch(self.field, m)

    def match_label(self, m):
        return fnmatch.fnmatch(self.label, m)

    def match_alias(self, m):
        for a in self.alias:
            if fnmatch.fnmatch(m, a) or fnmatch.fnmatch(a, m):
                return True
        return False

    def match(self, pattern):
        (id, label, field) = re.match(ENTRY_MATCH_REGEX, pattern).groups()
        id = id or "*"
        label = label or "*"
        field = field or "*"
        return self.match_field(field) and self.match_label(label) and self.match_alias(id)

    def __str__(self):
        if self.label == "":
            return f"{self.id}:{self.field}"
        else:
            return f"{self.id}@{self.label}:{self.field}"


def get_db():
    path = os.path.expanduser(DB_PATH)
    with open(path) as file:
        content = yaml.load(file, Loader=yaml.FullLoader)
    _db = []
    for line in content:
        id = line.pop("id")
        alias = line.pop("alias", [])
        alias.append(id)
        label = line.pop("label", "")
        for k, v in line.items():
            _db.append(Entry(id, label, alias, k, v))
    return _db


parser = argparse.ArgumentParser(prog="pfs")
parser.add_argument("-i", "--ids", action="store_true", help="display matching ids")
parser.add_argument("pattern", metavar="pattern", default="*@*:*", nargs="?")
args = parser.parse_args()

db = get_db()
matches = list(filter(lambda e: e.match(args.pattern), db))

if not matches:
    print(f"no matches for {args.pattern}")
    exit(2)

if len(matches) > 1 and not args.ids:
    print("multiple matches found, toggle -i")
    exit(3)

for match in matches:
    if args.ids:
        print(match)
    else:
        print(match.value)

