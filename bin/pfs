#! /usr/bin/env python3

import yaml
import os
import argparse
import fnmatch
from collections import UserList

DB_PATH = "~/my/pfs/main.yml"


class Entry:
    def __init__(self, line):
        self.id = line.pop("id")
        self.patterns = line.pop("patterns", [])
        self.patterns.append(self.id)
        self.label = line.pop("label", "default")
        self.fields = line

    def match(self, pattern):
        pattern_id, pattern_label = self.split_id_label(pattern)
        for p in self.patterns:
            if fnmatch.fnmatch(pattern_id, p) or fnmatch.fnmatch(p, pattern_id):
                if fnmatch.fnmatch(self.label, pattern_label):
                    return True
        return False

    def id_label(self):
        return f"{self.id}:{self.label}"

    @classmethod
    def split_id_label(cls, value):
        splits = value.split(":", maxsplit=1)
        if len(splits) == 2:
            return (splits[0], splits[1])
        else:
            return (value, "*")


class DB(UserList):
    def all(self):
        path = os.path.expanduser(DB_PATH)
        with open(path) as file:
            content = yaml.load(file, Loader=yaml.FullLoader)
        self.data = [Entry(line) for line in content]
        return self

    def filter(self, fun):
        self.data = list(filter(fun, self.data))
        return self

    def match(self, pattern):
        return self.filter(lambda e: e.match(pattern))


parser = argparse.ArgumentParser(prog="pfs")
parser.add_argument("-m", "--multi", action="store_true", help="returns results from multiple ids")
parser.add_argument("-i", "--ids-only", action="store_true", help="display ids only")
parser.add_argument("pattern", metavar="pattern", default="*:*", nargs="?")
parser.add_argument("key", metavar="key", nargs="?")
args = parser.parse_args()

matches = DB().all().match(args.pattern)
if not matches:
    print("no matches")
    exit(2)

if not args.multi:
    if len(matches) > 1:
        print("multiple matches found, toggle -m")
        exit(2)

for match in matches:
    if args.ids_only:
        print(match.id_label())
    elif args.key:
        value = match.fields.get(args.key)
        if not value:
            print("key not found")
            exit(2)
        print(value)
    else:
        for k in match.fields.keys():
            print(f"{match.id_label()} {k}")

